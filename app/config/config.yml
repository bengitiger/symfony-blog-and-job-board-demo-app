# This is the main configuration file of your application. It stores all the
# common options for every execution environment ('prod', 'dev', 'test').

# To avoid creating configuration files that are too long, we first import some
# files that define the values for important parts of the Symfony application,
# such as the security component and the dependency injection services
imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    
        # Config by vendor bundle
    - { resource: bundle_config/fosuserbundle.yml }
    - { resource: bundle_config/sonata_admin.yml }
    - { resource: bundle_config/sonata_core.yml }
    - { resource: bundle_config/sonata_user.yml }
        # Imported from Apps in Src
    - { resource: "@AppBundle/Resources/config/services.yml" }
    - { resource: "@AppBundle/Resources/config/admin.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: en
    max_jobs_per_category_on_homepage: 5
    max_jobs_on_category: 20


# Basic configuration for the Symfony framework features
framework:
    # Uncomment the 'ide' option to turn all of the file paths in an exception
    # page into clickable links that open the given file using your favorite IDE.
    # Supported values are 'textmate', 'macvim', 'emacs' and 'sublime' shortcuts
    # and any custom configuration string, such as: "phpstorm://open?file=%%f&line=%%l"
    # See http://symfony.com/doc/current/reference/configuration/framework.html#ide
    ide: "phpstorm://open?file=%%f&line=%%l"

    # esi:             ~
    translator:      { fallback: "%locale%" }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration (used for rendering application templates)
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    form_themes:
        - "views/form/bootstrap_3_horizontal_layout.html.twig"
        # - "views/form/fields.html.twig"

# Twig Configuration (used for rendering application templates)
knp_menu:
    # use "twig: false" to disable the Twig extension and the TwigRenderer
    twig:
        template: AppBundle:Menu:knp_menu.html.twig
    #  if true, enables the helper for PHP templates
    templating: false
    # the renderer to use, list is also available by default
    default_renderer: twig



# Assetic Configuration (used for managing web assets: CSS, JavaScript, Sass, etc.)
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        [ ]
    filters:
        cssrewrite: ~
        jsqueeze: ~
        scssphp:
            # the formatter must be the FQCN (don't use the 'compressed' value)
            formatter: "Leafo\\ScssPhp\\Formatter\\Compressed"

# Doctrine Configuration (used to access databases and manipulate their information)
doctrine:
    dbal:
        # instead of configuring the database access options in this file, we pull
        # them from the app/config/parameters.yml file. The reason is that config.yml
        # stores options that change the application behavior and parameters.yml
        # stores options that change from one server to another
        driver:   "%database_driver%"
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        types:
                json: Sonata\Doctrine\Types\JsonType
        # Might need to add something for SonataNotificationBundle
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: "%kernel.root_dir%/data/data.db3"
        # path:     "%database_path%"






    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        auto_mapping: true

# Have auto-mapping enabled above so apparently don't need the following line
#        entity_managers:
#            default:
#                mappings:
#                    ApplicationSonataUserBundle: ~
#                    SonataUserBundle: ~





# Swiftmailer Configuration (used to send emails)
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }







## This is the seed data used by Faker which is integrated into Alice (fixtures in yml)
#hautelook_alice:
#    locale: en_US   # default
#    seed: 1         # default

# I don't know how to set up caches
sonata_cache:
    caches:

# What does this mean...
sonata_block:
    default_contexts: [sonata_page_bundle]
    blocks:
        sonata.user.block.menu: # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        #sonata.media.block.media:
        #sonata.media.block.gallery:
        #sonata.media.block.feature_media:


# Translator configuration
framework:
    translator: ~

# Sonata intl configuration
sonata_intl:
    timezone:
        # default timezone used as fallback
        default: America/Vancouver


        # locale specific overrides

        locales:
            en_CA: America/Vancouver

# sonata_admin:
#     title:      Syn Foo
#     title_logo: /images/logo.png
#     templates:
#         dashboard: AppBundle:Admin:dashboard.html.twig

#     dashboard:
#         blocks:
#             # display a dashboard block
#              - { position: left, type: sonata.admin.block.admin_list }




# sonata_user:
#     security_acl: false
# #    security_acl: true
#     manager_type: orm # can be orm or mongodb
#     class:
#         user:         Application\Sonata\UserBundle\Entity\User
#         group:        Application\Sonata\UserBundle\Entity\Group

#     profile:  # Profile Form (firstname, lastname, etc ...)
#         form:
#             type:               sonata_user_profile
#             handler:            sonata.user.profile.form.handler.default
#             name:               sonata_user_profile_form
#             validation_groups:  [Profile]

#         # Profile show page is a dashboard as in SonataAdminBundle
#         dashboard:
#             blocks:
#                 - { position: left, type: sonata.block.service.text, settings: { content: "<h2>Welcome!</h2> This is a sample user profile dashboard, feel free to override it in the configuration! Want to make this text dynamic? For instance display the user's name? Create a dedicated block and edit the configuration!"} }
# #                - { position: left, type: sonata.order.block.recent_orders, settings: { title: Recent Orders, number: 5, mode: public }}
# #                - { position: right, type: sonata.timeline.block.timeline, settings: { max_per_page: 15 }}
# #                - { position: right, type: sonata.news.block.recent_posts, settings: { title: Recent Posts, number: 5, mode: public }}
# #                - { position: right, type: sonata.news.block.recent_comments, settings: { title: Recent Comments, number: 5, mode: public }}
#         # Customize user portal menu by setting links
#         menu:
#             - { route: 'sonata_user_profile_show', label: 'sonata_profile_title', domain: 'SonataUserBundle'}
#             - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'SonataUserBundle'}
# #            - { route: 'sonata_customer_addresses', label: 'link_list_addresses', domain: 'SonataCustomerBundle'}
#             - { route: 'sonata_user_profile_edit_authentication', label: 'link_edit_authentication', domain: 'SonataUserBundle'}
# #            - { route: 'sonata_order_index', label: 'order_list', domain: 'SonataOrderBundle'}


# #
# #  How to get the friggging change password form to be recognized?
# #





